---
- hosts: 127.0.0.1
  connection: local

  vars:
    ansible_python_interpreter: '{{ ansible_playbook_python }}'

  vars_files:
    - vars.yml

  pre_tasks:
    - name: Install required openshift python package
      pip:
        name: openshift
        state: present

    - name: Install required docker python package
      pip:
        name: docker
        state: present
      become: true
  
    - name: Install jmepath for json_query
      pip:
        name: jmespath
        state: present

    - name: Check Minikube's status
      command: minikube status
      register: minikube_status
      changed_when: false
      ignore_errors: true

    - name: Start Minikube if it's not running.
      command: minikube start
      when: "not minikube_status.stdout or 'Running' not in minikube_status.stdout"

    - name: Create a directory if it does not exist
      file:
        path: ~/Cn-Tk
        state: directory
        mode: '0755'

  tasks:
    - name: Print all available facts
      ansible.builtin.debug:
        var: ansible_facts

    - name: Get cluster IP address
      command: minikube ip
      register: minikube

# Set facts for minikube IP address, secret name for tls certs, users home dir and domain
    - name: Set playbook facts  
      set_fact: 
        minikubeIP: "{{ minikube.stdout }}"
        minikubeDomain: "{{ minikube.stdout }}.nip.io"
        home: "{{ lookup('env', 'HOME') }}"
        secretName: "ingress-tls"

# Create TLS certificates authority and ingress certificate
    - name: Setup TLS certificate for ingress
      include_tasks: task-tls-certificate.yml

# Configure helm repositories
    - name: Add Red Hat Helm charts repository
      community.kubernetes.helm_repository:
        name: redhat-charts
        repo_url: https://redhat-developer.github.com/redhat-helm-charts

    - name: Add Red Hat Helm charts repository
      community.kubernetes.helm_repository:
        name: redhat-charts
        repo_url: https://redhat-developer.github.com/redhat-helm-charts

    - name: Add kubernetes gitea chart repository
      community.kubernetes.helm_repository:
        name: gitea-charts
        repo_url: https://dl.gitea.io/charts/

# Update the Operator manager to use the latest image, as there are known issues 
# with pod dying due to an Out of Memory condition
    - name: Update the Operator image to use the latest
      community.kubernetes.k8s:
        state: present
        name: catalog-operator
        namespace: olm
        definition:
          kind: Deployment
          spec:
            template:
              spec:
                containers:
                  - name: catalog-operator
                    image: quay.io/operator-framework/olm:latest
                    args:
                      - '-namespace'
                      - olm
                      - >-
                        -configmapServerImage=quay.io/operator-framework/configmap-operator-registry:latest
                      - '-util-image'
                      - >-
                        quay.io/operator-framework/olm:latest

# Install a local image registry
    - name: Install local container registry 
      include_tasks: task-registry.yml

# Make the dashboard available through the Ingress service
    - name: Deloy the dashboard ingress
      include_tasks: task-kube-dashboard-ingress.yml

# Install a local git server so webhooks work locally
    - name: Deloy and configure Gitea service
      include_tasks: task-gitea.yml

# Clone git repos and push to local git - uses external playbook as can't use loop for a block
    - name: Call external playbook to clone and push git repo to local git
      include_tasks: clone_git_repo.yaml
      loop: "{{ git_repos }}"

# Clone starter kit git repos and push to local git - uses external playbook as can't use loop for a block
    - name: Call external playbook to clone and push git repo to local git
      include_tasks: clone_git_repo.yaml
      loop: "{{ starterkit_repos }}"

# Set starter kit git repos as template repos - uses external playbook as can't use loop for a block
    - name: Call external playbook to clone and push git repo to local git
      include_tasks: set_git_template.yaml
      loop: "{{ starterkit_repos }}"

# Install Che
    - name: Deloy and configure Che service
      include_tasks: task-che.yml

# Install tekton components - pipeline, dashboard and triggers
    - name: Deloy and configure Tekton service
      include_tasks: task-tekton.yml

# Install Cloud Native Toolkit using Terraform within a container
    - name: Deloy Cloud Native Toolkit using terraform
      include_tasks: task-CloudNativeToolkit.yml

# Install Cloud Native Toolkit pipelines and tasks

    - name: Install tasks
      k8s:
        state: present
        definition: "{{ lookup('template', '{{ item }}') }}"
        namespace: tools
      with_fileglob:
        - "{{ home }}/Cn-Tk/ibm-garage-tekton-tasks/tasks/*.yaml"

    - name: Install pipelines
      k8s:
        state: present
        definition: "{{ lookup('template', '{{ item }}') }}"
        namespace: tools
      with_fileglob:
        - "{{ home }}/Cn-Tk/ibm-garage-tekton-tasks/pipelines/*.yaml"
    
    - name: Add Tekton to the developer dashboard
      community.kubernetes.k8s:
        state: present
        definition:
          kind: ConfigMap
          apiVersion: v1
          metadata:
            name: tekton-config
            namespace: tools
            lables:
              app.kubernetes.io/component: tools
              app.kubernetes.io/name: tekton-config
              app.kubernetes.io/part-of: catalyst
              group: catalyst-tools
          data:
            TEKTON_URL: 'https://tekton-dashboard.{{ minikubeIP }}.nip.io/'
